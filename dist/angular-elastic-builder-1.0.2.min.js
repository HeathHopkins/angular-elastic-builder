!function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["$templateCache","RecursionHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},template:e.get("angular-elastic-builder/ChooserDirective.html"),compile:function(e){return t.compile(e,function(e,t,n){var i=e.depth=+n.depth,l=e.item;e.getGroupClassName=function(){var e=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"],t=i;return"group"===l.type&&t++,t%=e.length,e[t]}})}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["$templateCache","elasticBuilderService",function(e,t){return{scope:{data:"=elasticBuilder"},template:e.get("angular-elastic-builder/BuilderDirective.html"),link:function(e){var n=e.data;e.removeChild=function(t){e.filters.splice(t,1)},e.addRule=function(){e.filters.push({})},e.addGroup=function(){e.filters.push({type:"group",subType:"and",rules:[]})};var i=e.$watch("data.query",function(l){l&&(e.filters=t.toFilters(n.query,e.data.fields),i())},!0);e.$watch("filters",function(i){i&&(n.query=t.toQuery(e.filters,e.data.fields),console.log(JSON.stringify(n.query,null,2)))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["$templateCache","RecursionHelper",function(e,t){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},template:e.get("angular-elastic-builder/GroupDirective.html"),compile:function(e){return t.compile(e,function(e,t,n){e.depth=+n.depth;var i=e.group;e.addRule=function(){i.rules.push({})},e.addGroup=function(){i.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){i.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("elasticBuilderPath",function(){var t=e.element("script[src*=angular-elastic-builder").eq(0).attr("src"),n=t.split("/");n.pop();var i=n.join("/");return i})}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",["$templateCache",function(e){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},template:e.get("angular-elastic-builder/RuleDirective.html")}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("elasticBuilderService",function(){function t(e,t){var n=e.map(i.bind(e,t));return n}function n(e,t){var n=e.map(l.bind(e,t)).filter(function(e){return!!e});return n}function i(e,t,n){n!==!1&&(n=!0);var l=Object.keys(t)[0],s={or:"group",and:"group",range:"number"},r=s[l]||"item",u=a(r);switch(l){case"or":case"and":u.rules=t[l].map(i.bind(t,e)),u.subType=l;break;case"missing":case"exists":u.field=t[l].field,u.subType={exists:"exists",missing:"notExists"}[l],delete u.value;break;case"term":case"terms":u.field=Object.keys(t[l])[0];var o=e[Object.keys(t[l])[0]];if("multi"===o.type){var c=t[l][u.field];"string"==typeof c&&(c=[c]),u.values=o.choices.reduce(function(e,i){return e[i]=n===t[l][u.field].indexOf(i)>-1,e},{})}else u.subType=n?"equals":"notEquals",u.value=t[l][u.field],"number"==typeof u.value&&(u.subType="boolean");break;case"range":u.field=Object.keys(t[l])[0],u.subType=Object.keys(t[l][u.field])[0],u.value=t[l][u.field][u.subType];break;case"not":u=i(e,t[l].filter,!1);break;default:u.field=Object.keys(t[l])[0]}return u}function l(e,t){var n={};if("group"===t.type)return n[t.subType]=t.rules.map(l.bind(t,e)).filter(function(e){return!!e}),n;var i=t.field,a=e[i];if(i){switch(a.type){case"term":if(console.log(a),"boolean"===a.subType&&(t.subType="boolean"),console.log(t.subType),!t.subType)return;if(void 0===t.value)return;switch(t.subType){case"equals":case"boolean":n.term={},n.term[i]=t.value;break;case"notEquals":n.not={filter:{term:{}}},n.not.filter.term[i]=t.value;break;case"exists":n.exists={field:i};break;case"notExists":n.missing={field:i};break;default:throw new Error("unexpected subtype "+t.subType)}break;case"number":n.range={},n.range[i]={},n.range[i][t.subType]=t.value;break;case"date":if("exists"===t.subType)n.exists={field:i};else{if("notExists"!==t.subType)throw new Error("unexpected subtype");n.missing={field:i}}break;case"multi":n.terms={},n.terms[i]=Object.keys(t.values||{}).reduce(function(e,n){return t.values[n]&&e.push(n),e},[]);break;default:throw new Error("unexpected type")}return n}}function a(t){var n={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""},number:{field:"",subType:"",value:null}};return e.copy(n[t])}return{toFilters:t,toQuery:n}})}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="list-group form-inline">\n      <div\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="list-group-item actions">\n        <button class="btn btn-xs btn-primary" title="Add Rule" data-ng-click="addRule()">\n          <i class="fa fa-plus"></i>\n        </button>\n        <button class="btn btn-xs btn-primary" title="Add Group" data-ng-click="addGroup()">\n          <i class="fa fa-list"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-group">\n  <h5>If\n    <select data-ng-model="group.subType" class="form-control">\n      <option value="and">all</option>\n      <option value="or">any</option>\n    </select>\n    of these conditions are met\n  </h5>\n  <div\n    data-ng-repeat="rule in group.rules"\n    data-elastic-builder-chooser="rule"\n    data-elastic-fields="elasticFields"\n    data-depth="{{ +depth + 1 }}"\n    data-on-remove="removeChild($index)"></div>\n\n  <div class="list-group-item actions">\n    <button class="btn btn-xs btn-primary" title="Add Sub-Rule" data-ng-click="addRule()">\n      <i class="fa fa-plus"></i>\n    </button>\n    <button class="btn btn-xs btn-primary" title="Add Sub-Group" data-ng-click="addGroup()">\n      <i class="fa fa-list"></i>\n    </button>\n  </div>\n\n  <button class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </button>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <select class="form-control" data-ng-model="rule.field" data-ng-options="key as key for (key, value) in elasticFields"></select>\n\n  <span data-ng-if="elasticFields[rule.field].subType === \'boolean\'">\n    Equals\n    <select data-ng-model="rule.value" class="form-control">\n      <option value="0">False</option>\n      <option value="1">True</option>\n    </select>\n  </span>\n  <span data-ng-if="elasticFields[rule.field].type === \'multi\'">\n    <span data-ng-repeat="choice in elasticFields[rule.field].choices">\n      <label class="checkbox state">\n        <input type="checkbox" data-ng-model="rule.values[choice]">\n        {{ choice }}\n      </label>\n    </span>\n  </span>\n  <span data-ng-if="(elasticFields[rule.field].subType !== \'boolean\' && elasticFields[rule.field].type !== \'multi\')">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Range Options -->\n      <optgroup label="Numeral" data-ng-if="elasticFields[rule.field].type === \'number\'">\n        <option value="equals">=</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <!-- Term Options -->\n      <optgroup label="Text" data-ng-if="elasticFields[rule.field].type === \'term\'">\n        <option value="equals">Equals</option>\n        <option value="notEquals">! Equals</option>\n      </optgroup>\n\n      <!-- Generic Options -->\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">! Exists</option>\n      </optgroup>\n\n    </select>\n\n\n    <!-- Range Fields -->\n    <input class="form-control" data-ng-model="rule.value" type="number" data-ng-if="elasticFields[rule.field].type === \'number\'">\n\n    <!-- Term Fields -->\n    <input class="form-control" data-ng-model="rule.value" type="text" data-ng-if="([\'equals\',\'notEquals\'].indexOf(rule.subType) > -1) && (elasticFields[rule.field].type === \'term\')">\n  </span>\n\n\n  <button class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </button>\n\n</div>\n')}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper"])}(window.angular);